@page "/kho/detail/{id:int}"
@using System.Text.Json
@using TKS_intern_client.Services
@using TKS_intern_client.Shared.Forms
@using TKS_intern_client.Shared.Modals
@using TKS_intern_client.Shared.Tables
@using TKS_intern_shared.ViewModels.KhoUsers
@using TKS_intern_shared.ViewModels.Khos
@using TKS_intern_shared.ViewModels.Users
@inject ApiClient Api
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageHeader Title="Chi tiết kho hàng"
            SubTitle="Xem thông tin chi tiết">
    <PageHeaderBreadcrumb>
            <Breadcrumb>
                <BreadcrumbItem>Home</BreadcrumbItem>
                <BreadcrumbItem Href="/kho">Kho</BreadcrumbItem>
                <BreadcrumbItem>Chi tiết kho</BreadcrumbItem>
            </Breadcrumb>
    </PageHeaderBreadcrumb>        
</PageHeader>

@if (kho == null)
{
    <Skeleton Active="true" Title="true" ParagraphRows="3" />
}
else
{
    <Card Title="Thông tin kho" Bordered="true" Class="mb-4">
        <Extra>
            <a href="@($"/kho/edit/{kho.Id}")">
                <Button Type="ButtonType.Link">
                    <Icon Type="edit" Theme="IconThemeType.Outline" /> Chỉnh sửa
                </Button>
            </a>
        </Extra>
        <Body>
            <Descriptions Column="1" Bordered="true" Size="DescriptionsSize.Small">
                <DescriptionsItem Title="Tên kho">
                    @kho.TenKho
                </DescriptionsItem>
                <DescriptionsItem Title="Ghi chú">
                    @kho.GhiChu
                </DescriptionsItem>
                <DescriptionsItem Title="Ngày tạo">
                    @kho.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                </DescriptionsItem>
                <DescriptionsItem Title="Ngày cập nhật">
                    @kho.UpdatedAt.ToString("dd/MM/yyyy HH:mm")
                </DescriptionsItem>
            </Descriptions>
        </Body>
    </Card>

    <Tabs Type="TabType.Card">
        <TabPane Tab="Hàng trong kho">
            Danh sách hàng trong kho được hiển thị ở đây.
        </TabPane>
        <TabPane Tab="Người phụ trách">
            <Flex Justify="FlexJustify.SpaceBetween" Align="FlexAlign.Center" Class="mb-3">
                <Title Level="5"> Danh sách hàng trong kho</Title>
                <KhoUserFormModal Users="users" 
                    KhoId="id" 
                    OnValidSubmitCallback="OnValidSubmitCallback" 
                    Model="khoUserModel" />
            </Flex>

            <KhoUserTable Items="khoUserVMs"
                          OnEditClicked="OnEditClicked"
                          OnDeleteClicked="OnDeleteClicked" />
        </TabPane>
    </Tabs> 


}

@inject ModalService ModalService;
@code {
    [Parameter] public int id { get; set; }
    private KhoVM? kho;
    private bool IsKhoUserModalOpen = false;

    private List<KhoUserVM>? khoUserVMs = new List<KhoUserVM>();
    private List<UserVM> users = new List<UserVM>();
    private KhoUserSaveVM khoUserModel = new();

    protected override async Task OnInitializedAsync()
    {
        kho = await Api.GetAsync<KhoVM>($"api/Khos/{id}");
        if (kho == null)
        {
            await JS.InvokeVoidAsync("alert", "Không tìm thấy kho.");
            Navigation.NavigateTo("/kho");
            return;
        }
        khoUserVMs = await Api.GetAsync<List<KhoUserVM>>($"api/Khousers/kho/{id}");

        if (khoUserVMs == null || khoUserVMs.Count == 0)
        {
            await JS.InvokeVoidAsync("alert", "Kho này chưa có người phụ trách.");
        }

        users = await Api.GetAsync<List<UserVM>>("api/Users") ?? new();

    }

    private void OnDeleteClicked(KhoUserVM khoUser)
    {
        // Xử lý sự kiện xóa người phụ trách kho
        // Có thể gọi API để xóa hoặc hiển thị thông báo xác nhận
        Console.WriteLine($"Xóa người phụ trách: {khoUser.User?.FullName}");
    }

    private void OnEditClicked(KhoUserVM khoUser)
    {
        // Xử lý sự kiện chỉnh sửa người phụ trách kho
        // Có thể điều hướng đến trang chỉnh sửa hoặc hiển thị modal
        Console.WriteLine($"Chỉnh sửa người phụ trách: {khoUser.User?.FullName}");
    }

    private async Task OnValidSubmitCallback()
    {
        if (khoUserModel != null)
        {
            khoUserModel.KhoId = id;
            var response = await Api.PostAsync("/api/KhoUsers", khoUserModel);
            if (response.IsSuccessStatusCode)
            {
                khoUserVMs = await Api.GetAsync<List<KhoUserVM>>($"api/Khousers/kho/{id}");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Thêm người phụ trách kho thất bại.");
            }
        }

        Console.WriteLine($"KhoUser {JsonSerializer.Serialize(khoUserModel)}");
    }
    
}
