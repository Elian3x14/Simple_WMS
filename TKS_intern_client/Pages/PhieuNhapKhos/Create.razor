@page "/phieunhapkho/create"
@using TKS_intern_client.Services
@using TKS_intern_client.Shared.Forms
@using TKS_intern_shared.ViewModels.PhieuNhapKhos
@using TKS_intern_shared.ViewModels.Khos
@using TKS_intern_shared.ViewModels.NhaCungCaps
@using TKS_intern_shared.ViewModels.ChiTietPhieuNhapKhos
@inject ApiClient Api
@inject NavigationManager Navigation
@inject IJSRuntime JS

<Breadcrumb>
    <BreadcrumbItem>Home</BreadcrumbItem>
    <BreadcrumbItem Href="/phieunhapkho">Phiếu nhập kho</BreadcrumbItem>
    <BreadcrumbItem>Tạo mới</BreadcrumbItem>
</Breadcrumb>

<h3>Thêm mới Phiếu Nhập Kho</h3>

@if (khos == null || nhaCungCaps == null)
{
    <p><em>Đang tải dữ liệu...</em></p>
}
else
{
    <AntDesign.Steps Current="@currentStep" Class="mb-4">
        <AntDesign.Step Title="Thông tin phiếu nhập kho" />
        <AntDesign.Step Title="Chi tiết phiếu nhập kho" />
        <AntDesign.Step Title="Xem lại & Xác nhận" />
    </AntDesign.Steps>

    @if (currentStep == 0)
    {
        <PhieuNhapKhoForm Model="model"
                          Khos="khos"
                          NhaCungCaps="nhaCungCaps"
                          OnValidSubmitCallback="NextStep"
                          OnCancel="Cancel" />
    }
    else if (currentStep == 1)
    {
        <ChiTietPhieuNhapKhoForm Items="chiTietList"
                                 OnValidSubmitCallback="NextStep"
                                 OnCancel="BackStep" />
    }
    else if (currentStep == 2)
    {
        <Card Class="p-4" Bordered="true">
            <Title Level="5">Thông tin phiếu nhập kho</Title>

            <Descriptions Column="1" Bordered="true" Size="DescriptionsSize.Small">
                <DescriptionsItem Title="Kho">
                    <Tag Color="TagColor.Blue">
                        @khos?.FirstOrDefault(k => k.Id == model.KhoId)?.TenKho
                    </Tag>
                </DescriptionsItem>

                <DescriptionsItem Title="Nhà cung cấp">
                    <Tag Color="TagColor.Lime">
                        @nhaCungCaps?.FirstOrDefault(n => n.Id == model.NhaCungCapId)?.TenNhaCungCap
                    </Tag>
                </DescriptionsItem>

                <DescriptionsItem Title="Ngày nhập kho">
                    <Tag Color="TagColor.Orange">
                        @model.NgayNhapKho.ToString("dd/MM/yyyy")
                    </Tag>
                </DescriptionsItem>
            </Descriptions>


        <Divider Orientation="DividerOrientation.Left">
            <Title Level="5">Chi tiết sản phẩm</Title>
        </Divider>


            <Table TItem="ChiTietPhieuNhapKhoSaveVM" DataSource="@chiTietList">
                <PropertyColumn Property="c => c.SanPhamId" Title="Sản phẩm">
                    @(context.SanPham != null ? context.SanPham.TenSanPham : "Không xác định")
                </PropertyColumn>

                <PropertyColumn Property="c => c.SoLuongNhap" Title="Số lượng nhập">
                    @context.SoLuongNhap
                </PropertyColumn>
                <PropertyColumn Property="c => c.DonGiaNhap" Title="Đơn giá nhập">
                    @context.DonGiaNhap.ToString("N0")
                </PropertyColumn>
                <PropertyColumn Property="c => (c.SoLuongNhap * c.DonGiaNhap)" Title="Thành tiền">
                    @((context.SoLuongNhap * context.DonGiaNhap).ToString("N0"))
                </PropertyColumn>

            </Table>


    <Divider />

    <Flex Gap="FlexGap.Small" Direction="FlexDirection.Horizontal">
        <Button Type="default" Icon="left" OnClick="BackStep">Quay lại</Button>
        <Button Type="ButtonType.Primary" Icon="save" OnClick="SubmitAll">Xác nhận & Lưu</Button>
    </Flex>
</Card>
    }

}

@code {
    private int currentStep = 0;
    private PhieuNhapKhoCreateVM model = new() { NgayNhapKho = DateTime.Now };
    private List<KhoVM>? khos;
    private List<NhaCungCapVM>? nhaCungCaps;
    private List<ChiTietPhieuNhapKhoSaveVM> chiTietList = new();

    protected override async Task OnInitializedAsync()
    {
        khos = await Api.GetAsync<List<KhoVM>>("api/Khos");
        nhaCungCaps = await Api.GetAsync<List<NhaCungCapVM>>("api/NhaCungCaps");
    }

    private void NextStep()
    {
        currentStep++;
    }

    private void BackStep()
    {
        currentStep--;
    }

    private async Task SubmitAll()
    {
        var response = await Api.PostAsync("api/PhieuNhapKhos", model);
        if (!response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", $"Lỗi: {response.StatusCode}");
            return;
        }

        var createdPhieu = await response.Content.ReadFromJsonAsync<PhieuNhapKhoVM>();
        if (createdPhieu == null)
        {
            await JS.InvokeVoidAsync("alert", "Không đọc được dữ liệu phiếu vừa tạo");
            return;
        }

        foreach (var item in chiTietList)
        {
            item.PhieuNhapKhoId = createdPhieu.Id;
            await Api.PostAsync("api/ChiTietPhieuNhapKhos", item);
        }

        Navigation.NavigateTo("/phieunhapkho");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/phieunhapkho");
    }
}
