@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using TKS_intern_shared.ViewModels.LoaiSanPhams

<EditForm Model="Model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Mã loại sản phẩm</label>
        <InputText class="form-control" @bind-Value="Model.MaLoaiSanPham" />
        <ValidationMessage For="@(() => Model.MaLoaiSanPham)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Tên loại sản phẩm</label>
        <InputText class="form-control" @bind-Value="Model.TenLoaiSanPham" />
        <ValidationMessage For="@(() => Model.TenLoaiSanPham)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Ghi chú</label>
        <InputTextArea class="form-control" @bind-Value="Model.GhiChu" />
        <ValidationMessage For="@(() => Model.GhiChu)" />
    </div>

    <button type="submit" class="btn btn-primary">Lưu</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="OnCancelClicked">Hủy</button>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public LoaiSanPhamSaveVM Model { get; set; } = new();

    [Parameter]
    public EventCallback OnValidSubmitCallback { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private async Task OnValidSubmit()
    {
        if (OnValidSubmitCallback.HasDelegate)
            await OnValidSubmitCallback.InvokeAsync();
    }

    private async Task OnCancelClicked()
    {
        if (OnCancel.HasDelegate)
            await OnCancel.InvokeAsync();
    }
}
