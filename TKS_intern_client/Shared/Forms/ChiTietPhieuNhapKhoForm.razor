@using System.Text.Json
@using TKS_intern_client.Services
@using TKS_intern_client.Shared.Tables
@using TKS_intern_shared.ViewModels.ChiTietPhieuNhapKhos
@using TKS_intern_shared.ViewModels.SanPhams
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms

<div>
    <ChiTietPhieuNhapKhoInlineForm 
        SanPhams="SanPhams" 
        OnAdd="HandleAddRow"
        IsEdit="IsEdit"
        Model="chiTiet" />

    <ChiTietPhieuNhapKhoSaveTable 
        Items="Items" 
        OnEditClicked="EditRow" 
        OnDeleteClicked="DeleteRow" />

    <div class="mt-4">
        <Flex Gap="FlexGap.Small" Direction="FlexDirection.Horizontal">
            <Button Type="ButtonType.Default" OnClick="OnCancelClicked">Hủy</Button>
            <Button Type="ButtonType.Primary" OnClick="OnValidSubmit">
                Bước kế tiếp
                <Icon Type="right" Theme="IconThemeType.Outline" />
            </Button>
        </Flex>
    </div>
</div>

@inject ApiClient Api;

@code {
    [Parameter] public List<ChiTietPhieuNhapKhoSaveVM> Items { get; set; } = new();
    [Parameter] public EventCallback OnValidSubmitCallback { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    [Parameter] public ChiTietPhieuNhapKhoSaveVM chiTiet { get; set; } = new();

    private bool IsEdit { get; set; } = false;
    private List<SanPhamVM> SanPhams { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        SanPhams = await Api.GetAsync<List<SanPhamVM>>("api/SanPhams") ?? new();
    }

    private async Task OnValidSubmit()
    {
        if (OnValidSubmitCallback.HasDelegate)
            await OnValidSubmitCallback.InvokeAsync();
    }

    private async Task OnCancelClicked()
    {
        if (OnCancel.HasDelegate)
            await OnCancel.InvokeAsync();
    }

    private Task HandleAddRow(ChiTietPhieuNhapKhoSaveVM item)
    {
        if (IsEdit)
        {
            Items.Remove(chiTiet); // Remove the old item if editing
            Items.Add(item); // Add the updated item
        }
        else
        {
            Items.Add(item);
        }
        chiTiet = new(); // Reset the current item after adding
        IsEdit = false; // Reset edit mode
        return Task.CompletedTask;
    }

    private void EditRow(ChiTietPhieuNhapKhoSaveVM item)
    {
        IsEdit = true; // Set edit mode
        chiTiet = item; // Set the current item to be edited
    }

    private void DeleteRow(ChiTietPhieuNhapKhoSaveVM item)
    {
        Items.Remove(item);
    }

}
