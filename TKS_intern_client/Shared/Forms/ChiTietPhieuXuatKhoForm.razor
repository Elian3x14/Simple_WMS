@using TKS_intern_client.Services
@using TKS_intern_shared.ViewModels.ChiTietPhieuXuatKhos
@using TKS_intern_shared.ViewModels.SanPhams
@using TKS_intern_client.Shared.Tables
@using Microsoft.AspNetCore.Components

<div>
    <ChiTietPhieuXuatKhoInlineForm SanPhams="SanPhams"
                                   Item="CurrentItem"
                                   IsEdit="IsEdit"
                                   OnAdd="HandleAddRow" />

    <ChiTietPhieuXuatKhoSaveTable Items="Items"
                                  OnEditClicked="EditRow"
                                  OnDeleteClicked="DeleteRow" />

    <div class="mt-4">
        <AntDesign.Flex Gap="FlexGap.Small" Direction="FlexDirection.Horizontal">
            <AntDesign.Button Type="ButtonType.Default" OnClick="OnCancelClicked">Hủy</AntDesign.Button>
            <AntDesign.Button Type="ButtonType.Primary" OnClick="OnValidSubmit">
                Bước kế tiếp
                <Icon Type="right" Theme="IconThemeType.Outline" />
            </AntDesign.Button>
        </AntDesign.Flex>
    </div>
</div>

@code {
    [Parameter] public List<ChiTietPhieuXuatKhoSaveVM> Items { get; set; } = new();
    [Parameter] public EventCallback OnValidSubmitCallback { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private List<SanPhamVM> SanPhams { get; set; } = new();
    private ChiTietPhieuXuatKhoSaveVM CurrentItem { get; set; } = new()
    {
        SoLuongXuat = 1,
        DonGiaXuat = 0
    };
    private bool IsEdit { get; set; } = false;

    [Inject] public ApiClient Api { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        SanPhams = await Api.GetAsync<List<SanPhamVM>>("api/SanPhams") ?? new();
    }

    private async Task OnValidSubmit()
    {
        if (OnValidSubmitCallback.HasDelegate)
            await OnValidSubmitCallback.InvokeAsync();
    }

    private async Task OnCancelClicked()
    {
        if (OnCancel.HasDelegate)
            await OnCancel.InvokeAsync();
    }

    private Task HandleAddRow(ChiTietPhieuXuatKhoSaveVM item)
    {
        if (IsEdit)
        {
            Items.Remove(CurrentItem); // Remove old version
            Items.Add(item);           // Add updated version
        }
        else
        {
            Items.Add(item);           // Add new
        }

        // Reset form
        CurrentItem = new ChiTietPhieuXuatKhoSaveVM
        {
            SoLuongXuat = 1,
            DonGiaXuat = 0
        };
        IsEdit = false;

        return Task.CompletedTask;
    }

    private void EditRow(ChiTietPhieuXuatKhoSaveVM item)
    {
        IsEdit = true;
        CurrentItem = item;
    }

    private void DeleteRow(ChiTietPhieuXuatKhoSaveVM item)
    {
        Items.Remove(item);
        // Nếu đang sửa chính item đó thì cũng reset form
        if (item == CurrentItem)
        {
            CurrentItem = new ChiTietPhieuXuatKhoSaveVM
            {
                SoLuongXuat = 1,
                DonGiaXuat = 0
            };
            IsEdit = false;
        }
    }
}
